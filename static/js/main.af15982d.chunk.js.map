{"version":3,"sources":["public/icons/cross-icon.svg","public/icons/keyboard-icon.svg","public/icons/play-icon.svg","public/icons/person-icon.svg","public/icons/gamepad-icon.svg","public/icons/reload-icon.svg","Utils/TimerHelper.js","Utils/GameService.js","Components/Common/Button/Button.js","Components/Common/Logo/Logo.js","Components/Common/Text/Text.js","Components/Common/TextBox/TextBox.js","Components/Common/DropDown/DropDown.js","Components/Initialize/initialize.js","Components/PlayerInfo/PlayerInfo.js","Components/ScoreBoard/ScoreBoard.js","Components/ScoreInfo/ScoreInfo.js","Components/WordsDisplay/WordDisplay.js","Components/CircularCountdown/CircularCountdown.js","Components/TimerDisplay/TimerDisplay.js","Utils/WordManager.js","Components/GamePlay/GamePlay.js","Components/GameOver/GameOver.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","TimerHelper","milliSecsToTime","duration","milliseconds","parseInt","seconds","Math","floor","minutes","hours","toString","padStart","durationToMilliSec","totalMilliSec","arr","split","DIFFICULTY_LEVELS","Utils","getUserScores","scores","sessionStorage","getItem","length","arrScores","JSON","parse","slice","max","saveUserScore","presentScore","push","setItem","stringify","saveTotalNewWords","count","getTotalNewWords","saveUserSession","userName","difficultyLevel","clear","getUserSession","getGameTimeout","getGameDifficultyFactor","parseFloat","updateGameDifficultyFactor","difficultyFactor","currentDifficultyFactor","console","log","updateTotalDuration","getTotalDuration","getMaxScore","data","map","score","mx","REDIRECT_TO_LOGIN","pathname","REDIRECT_TO_EXIST","REDIRECT_TO_GAME","Button","icon","text","onClick","className","src","alt","Logo","keyboardIcon","Text","TextBox","setText","isError","placeholder","textAlign","onChange","value","target","toLowerCase","autoFocus","style","type","DropDown","items","useState","selected","setSelected","options","item","key","label","Initialize","history","useHistory","difficulty","setDifficulty","name","setName","errorMessage","setErrorMessage","setErrorFlag","Row","Col","playIcon","event","toLocaleUpperCase","PlayerInfo","userData","playerName","gameLevel","personIcon","gamepadIcon","ScoreBoard","indx","ScoreInfo","totalMs","setTotalMs","totalDuration","setTotalDuration","useEffect","timer","setInterval","ms","updateTotalScore","clearInterval","WordsDisplay","word","typedText","formattedWord","letter","index","id","CircularCountdown","viewBox","xmlns","cx","cy","r","strokeDasharray","d","TimerDisplay","DATA_BY_LEVEL","wordsData","filter","WordManager","random","GamePlay","defaultTimeOutInMs","defaultTimeoutDuration","pendingTimeInMs","setPendingTimeInMs","pendingDuration","setPendingDuration","wordMgr","setTypedText","wordCount","setWordCount","getNewWord","getWord","newWord","setNewWord","updateTimeOutDisplay","time","md","crossIcon","currentDiffFactor","GameOver","latestScore","highestScore","totalSolved","reloadIcon","App","Container","fluid","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.af15982d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cross-icon.465bb167.svg\";","module.exports = __webpack_public_path__ + \"static/media/keyboard-icon.9c1f9820.svg\";","module.exports = __webpack_public_path__ + \"static/media/play-icon.c6ad2822.svg\";","module.exports = __webpack_public_path__ + \"static/media/person-icon.c589b8d1.svg\";","module.exports = __webpack_public_path__ + \"static/media/gamepad-icon.0cd364ed.svg\";","module.exports = __webpack_public_path__ + \"static/media/reload-icon.7c71c1ab.svg\";","\r\nconst TimerHelper = {\r\n\r\n  milliSecsToTime: (duration) => {\r\n\r\n    let milliseconds = parseInt((duration % 1000));\r\n    let seconds = Math.floor((duration / 1000) % 60);\r\n    let minutes = Math.floor((duration / (1000 * 60)) % 60);\r\n    let hours = Math.floor((duration / (1000 * 60 * 60)) % 24);\r\n\r\n    hours = hours.toString().padStart(2, '0');\r\n    minutes = minutes.toString().padStart(2, '0');\r\n    seconds = seconds.toString().padStart(2, '0');\r\n    milliseconds = milliseconds.toString().padStart(3, '0');\r\n\r\n    return {\r\n      hours,\r\n      minutes,\r\n      seconds,\r\n      milliseconds\r\n    };\r\n  },\r\n\r\n  durationToMilliSec: (duration) => {\r\n    let totalMilliSec = 0;\r\n    var arr = duration.split('.');\r\n    const minutes = parseInt(arr[0]);\r\n    const seconds = parseInt(arr[1]);\r\n    const milliSecs = parseInt(arr[2]);\r\n    totalMilliSec = milliSecs;\r\n    totalMilliSec += minutes * (1000 * 60);\r\n    totalMilliSec += seconds * 1000;       \r\n    return totalMilliSec;\r\n  }\r\n}\r\n\r\nexport default TimerHelper","import TimerHelper from \"./TimerHelper\";\r\n\r\nconst keyUserName = \"userName\";\r\nconst keyGameScores = \"gameScores\";\r\nconst keyDifficultyLevel = \"difficultyLevel\";\r\nconst defaultDifficultyLevel = \"EASY\";\r\nconst keyGameDuration = \"gameDuration\";\r\nconst keyTotalNewWords = \"totalNewWords\";\r\nconst keyGameDifficultyFactor = \"gameDifficultyFactor\";\r\nconst keyLevelEasy = \"EASY\";\r\nconst keyLevelMedium = \"MEDIUM\";\r\nconst keyLevelHard = \"HARD\";\r\nconst incrementFactorVal = 0.01;\r\n\r\nconst DIFFICULTY_LEVELS = {\r\n   'EASY': 1,\r\n   'MEDIUM': 1.5,\r\n   'HARD': 2\r\n}\r\nconst Utils = {\r\n\r\n   getUserScores: () => {\r\n      let scores = sessionStorage.getItem(keyGameScores) ?? [];\r\n      if (scores.length > 0) {\r\n         const arrScores = JSON.parse(scores);\r\n         return arrScores.slice(Math.max(arrScores.length - 5, 0))\r\n      }\r\n   },\r\n\r\n   saveUserScore: (presentScore) => {\r\n      let scores = JSON.parse(sessionStorage.getItem(keyGameScores)) ?? [];\r\n      scores.push(presentScore);\r\n      sessionStorage.setItem(keyGameScores, JSON.stringify(scores));\r\n   },\r\n   saveTotalNewWords: (count) => {\r\n      sessionStorage.setItem(keyTotalNewWords, count);\r\n   },\r\n   getTotalNewWords: () => {\r\n      return sessionStorage.getItem(keyTotalNewWords);\r\n   },\r\n\r\n   saveUserSession: (userName, difficultyLevel) => {\r\n      if (difficultyLevel.length <= 0) {\r\n         difficultyLevel = defaultDifficultyLevel;\r\n      }\r\n      sessionStorage.clear();\r\n      sessionStorage.setItem(keyUserName, userName);\r\n      sessionStorage.setItem(keyDifficultyLevel, difficultyLevel);\r\n      sessionStorage.setItem(keyGameDifficultyFactor, DIFFICULTY_LEVELS[difficultyLevel]);\r\n\r\n   },\r\n\r\n   getUserSession: () => ({\r\n      userName: sessionStorage.getItem(keyUserName),\r\n      difficultyLevel: sessionStorage.getItem(keyDifficultyLevel)\r\n   }),\r\n\r\n   getGameTimeout: (difficultyLevel) => {\r\n      return 4000;\r\n   },\r\n\r\n   getGameDifficultyFactor: () => {\r\n      return parseFloat(sessionStorage.getItem(keyGameDifficultyFactor));\r\n   },\r\n\r\n\r\n   updateGameDifficultyFactor: (difficultyFactor) => {\r\n      const currentDifficultyFactor = parseFloat(difficultyFactor);\r\n      console.log(difficultyFactor);\r\n      if (currentDifficultyFactor >= DIFFICULTY_LEVELS[keyLevelEasy] && currentDifficultyFactor < DIFFICULTY_LEVELS[keyLevelMedium]) {\r\n         console.log(keyLevelEasy);\r\n         sessionStorage.setItem(keyDifficultyLevel, keyLevelEasy);\r\n      } else if (currentDifficultyFactor >= DIFFICULTY_LEVELS[keyLevelMedium] && currentDifficultyFactor <= DIFFICULTY_LEVELS[keyLevelHard]) {\r\n         sessionStorage.setItem(keyDifficultyLevel, keyLevelMedium);\r\n         console.log(keyLevelMedium);\r\n      } else {\r\n         sessionStorage.setItem(keyDifficultyLevel, keyLevelHard);\r\n         console.log(keyLevelHard);\r\n      }\r\n      sessionStorage.setItem(keyGameDifficultyFactor, difficultyFactor);\r\n   },\r\n\r\n   updateTotalDuration: (duration) => {\r\n      sessionStorage.setItem(keyGameDuration, duration);\r\n   },\r\n   getTotalDuration: () => {\r\n      return sessionStorage.getItem(keyGameDuration);\r\n   },\r\n\r\n   getMaxScore: (scores) => {\r\n      var data = scores.map( score => { return TimerHelper.durationToMilliSec(score)  } );\r\n      var mx = Math.max(...data);\r\n      return  TimerHelper.milliSecsToTime(mx);\r\n   },\r\n\r\n   REDIRECT_TO_LOGIN: {\r\n      pathname: '/'\r\n   },\r\n   REDIRECT_TO_EXIST: {\r\n      pathname: '/gameover'\r\n   },\r\n   REDIRECT_TO_GAME: {\r\n      pathname: '/gameplay'\r\n   }\r\n\r\n}\r\n\r\nexport default Utils;","\r\nimport React from 'react';\r\nimport './Button.css'\r\n\r\nfunction Button({ icon, text, onClick }) {\r\n    return (\r\n            <div className=\"Button\" onClick={onClick}>\r\n                {icon ? <img className=\"icon\" src={icon} alt=\"icon\" /> : null}\r\n                <span>{text}</span>\r\n            </div>\r\n    );\r\n}\r\nexport default Button;","import React from 'react'\r\nimport keyboardIcon from '../../../public/icons/keyboard-icon.svg'\r\nimport './Logo.css';\r\n\r\nfunction Logo() {\r\n   return (\r\n      <div className=\"Logo\">\r\n         <img className=\"keyboardLogo\" src={keyboardIcon} alt=\"logo\" />\r\n         <div className=\"logoTitle\"> fast fingers</div>\r\n         <div className=\"logoDescription\">_________  the ultimate typing game   _________</div>\r\n      </div>\r\n   );\r\n}\r\nexport default Logo","import React from 'react';\r\nimport './Text.css'\r\nfunction Text({ icon, text }) {\r\n    return (\r\n        <>\r\n            <div className=\"iconText\" >\r\n                {icon ? <img className=\"icon\" src={icon} alt=\"icon\" /> : null}\r\n                <span>{text}</span>\r\n            </div>\r\n        </>\r\n        );\r\n}\r\nexport default Text;","import React from 'react';\r\nimport '../TextBox/TextBox.css';\r\n\r\nfunction TextBox({ text, setText, isError = false, placeholder = '', textAlign = 'left', onChange }) {\r\n   if (!onChange) {\r\n      onChange = ({ target: { value } }) => setText(value.toLowerCase());\r\n   }\r\n\r\n   return (\r\n      <div className=\"textBoxContainer\">\r\n         <input\r\n            autoFocus\r\n            className={isError ? \"textBox error\" : \"textBox\"}\r\n            style={{ textAlign: textAlign }}\r\n            type=\"text\"\r\n            placeholder={placeholder}\r\n            value={text}\r\n            onChange={onChange}\r\n         />\r\n      </div>\r\n   );\r\n}\r\nexport default TextBox","import React, { useState } from 'react';\r\nimport './DropDown.css';\r\nfunction DropDown({ items, setItem, placeholder }) {\r\n   const [selected, setSelected] = useState('');\r\n   const options = items.map((item) =>\r\n      <div\r\n         className=\"options\"\r\n         key={item.label}\r\n         onClick={() => { setSelected(item.label); setItem(item.value); }}>\r\n         {item.label}\r\n      </div>);\r\n   return (\r\n      <div className=\"dropdown\">\r\n         <div className=\"options\">{!selected ? placeholder : selected}</div>\r\n         <div className=\"dropdown-content\" >\r\n            {options}\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\nexport default DropDown","import React, { useState } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport './initialize.css'\r\nimport Utils from '../../Utils/GameService';\r\nimport Button from '../Common/Button/Button';\r\nimport Logo from '../Common/Logo/Logo';\r\nimport Text from '../Common/Text/Text';\r\nimport TextBox from '../Common/TextBox/TextBox';\r\nimport DropDown from '../Common/DropDown/DropDown';\r\nimport playIcon from '../../public/icons/play-icon.svg'\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nfunction Initialize() {\r\n  let history = useHistory();\r\n  const [difficulty, setDifficulty] = useState('');\r\n  const [name, setName] = useState('');\r\n  const [errorMessage, setErrorMessage] = useState('');\r\n  const [isError, setErrorFlag] = useState(false);\r\n  const difficulties = [\r\n    { label: \"Easy\", value: \"Easy\" },\r\n    { label: \"Medium\", value: \"MEDIUM\" },\r\n    { label: \"Hard\", value: \"HARD\" }\r\n  ]\r\n  const handleStartClick = (event) => {\r\n    if (name.length > 0) {\r\n      Utils.saveUserSession(name.toLocaleUpperCase(), difficulty.toLocaleUpperCase());\r\n      history.push(Utils.REDIRECT_TO_GAME);\r\n    } else {\r\n      setErrorMessage(\"Please provide username\");\r\n      setErrorFlag(true);\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Row>\r\n      <Col>\r\n        <Logo />\r\n        <TextBox\r\n          text={name}\r\n          setText={setName}\r\n          placeholder=\"Type your name\"\r\n          isError={isError}>\r\n        </TextBox>\r\n        <Text text={errorMessage} ></Text>\r\n        <DropDown\r\n          items={difficulties}\r\n          setItem={setDifficulty}\r\n          placeholder=\"Difficulty Level\">\r\n        </DropDown>\r\n        <Button\r\n          icon={playIcon}\r\n          text=\"Start Game\"\r\n          onClick={handleStartClick} >\r\n        </Button>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\nexport default Initialize;\r\n","import React from 'react';\r\nimport Utils from '../../Utils/GameService';\r\nimport personIcon from '../../public/icons/person-icon.svg'\r\nimport gamepadIcon from '../../public/icons/gamepad-icon.svg'\r\nimport Text from '../Common/Text/Text';\r\nimport './PlayerInfo.css'\r\n\r\nfunction PlayerInfo() {\r\n\r\n   const userData = Utils.getUserSession();\r\n   let playerName = userData.userName;\r\n   let gameLevel = userData.difficultyLevel;\r\n   return (\r\n      <div className=\"info\">\r\n         <Text\r\n            icon={personIcon}\r\n            text={\"PLAYER NAME : \" + playerName}>\r\n         </Text>\r\n         <Text\r\n            icon={gamepadIcon}\r\n            text={\"LEVEL : \" + gameLevel}>\r\n         </Text>\r\n      </div>\r\n   );\r\n}\r\n\r\n\r\n\r\nexport { PlayerInfo };","import React, { useState, useEffect } from 'react';\r\nimport Utils from '../../Utils/GameService';\r\nimport './ScoreBoard.css';\r\n\r\nfunction ScoreBoard() {\r\n   const scores = Utils.getUserScores();\r\n   return (\r\n      <div className=\"ScoreBoard\">\r\n         <div className=\"scoreBoardHeader\">\r\n            <p>SCORE BOARD</p>\r\n         </div>\r\n         <div className=\"scoresContainer\">\r\n            <ul className = \"scores\">\r\n               {scores &&\r\n                  scores.map((score, indx) => (\r\n                     <li key={score}>Game {indx + 1}: {score}</li>\r\n                  ))\r\n               }\r\n            </ul>\r\n         </div>\r\n      </div>\r\n   );\r\n}\r\n\r\nexport { ScoreBoard };","import React, { useState, useEffect } from 'react';\r\nimport Utils from '../../Utils/GameService';\r\nimport TimerHelper from '../../Utils/TimerHelper';\r\nimport './ScoreInfo.css'\r\n\r\n\r\nfunction ScoreInfo() {\r\n\r\n   let [totalMs, setTotalMs] = useState(0);\r\n   let [totalDuration, setTotalDuration] = useState(TimerHelper.milliSecsToTime(0));\r\n   const updateTotalScore = (ms) => {\r\n      const duration = TimerHelper.milliSecsToTime(ms);\r\n      Utils.updateTotalDuration(`${duration.minutes}.${duration.seconds}.${duration.seconds}`);\r\n      setTotalDuration(duration);\r\n      setTotalMs(ms);\r\n   }\r\n\r\n\r\n   useEffect(() => {\r\n      const timer = setInterval(() => updateTotalScore(totalMs + 1000), 1000);\r\n      return () => clearInterval(timer);\r\n\r\n   }, [totalMs]);\r\n\r\n   return (\r\n      <div className=\"scoreInfo\">\r\n         <p>FAST FINGERS </p>\r\n         <p>SCORE  : {totalDuration.minutes}.{totalDuration.seconds} </p>\r\n      </div>\r\n   );\r\n}\r\n\r\n\r\nexport { ScoreInfo };","import React from 'react';\r\nimport './WordDisplay.css'\r\n\r\nfunction WordsDisplay({ word, typedText }) {\r\n   const formattedWord = word.split('').map((letter, index) => <div id={index} className={typedText && typedText[index] ? letter === typedText[index] ? \"correct\" : \"incorrect\" : \"\"}> {letter}</div>)\r\n   return (\r\n      <div className=\"wordDisplay\">\r\n         {formattedWord}\r\n      </div>\r\n   );\r\n}\r\n\r\n\r\nexport default WordsDisplay;","import React, { useState, useEffect } from 'react'\r\nimport './CircularCountdown.css'\r\n\r\nfunction CircularCountdown({ duration }) {\r\n\r\n   return (\r\n      <div className=\"base-timer\">\r\n         <svg className=\"base-timer__svg\" viewBox=\"0 0 100 100\" xmlns=\"http://www.w3.org/2000/svg\">\r\n            <g className=\"base-timer__circle\">\r\n               <circle className=\"base-timer__path-elapsed\" cx=\"50\" cy=\"50\" r=\"45\" />\r\n               <path\r\n                  id=\"base-timer-path-remaining\"\r\n                  strokeDasharray=\"283\"\r\n                  className=\"base-timer__path-remaining\"\r\n                  d=\"\r\n          M 50, 50\r\n          m -45, 0\r\n          a 45,45 0 1,0 90,0\r\n          a 45,45 0 1,0 -90,0\r\n        \"\r\n               ></path>\r\n            </g>\r\n         </svg>\r\n         <span id=\"base-timer-label\" className=\"base-timer__label\">\r\n            {duration.seconds}:{duration.milliseconds}\r\n         </span>\r\n      </div>\r\n   );\r\n}\r\nexport default CircularCountdown","import React, { useState, useEffect, useRef } from 'react';\r\nimport \"./TimerDisplay.css\";\r\nimport CircularCountdown from \"../CircularCountdown/CircularCountdown\";\r\n\r\nfunction TimerDisplay({ duration }) {\r\n   return ( \r\n          \r\n         <CircularCountdown\r\n            duration={duration}>\r\n         </CircularCountdown>     \r\n   );\r\n}\r\n\r\n\r\nexport default TimerDisplay;","import wordsData from '../data/dictionary.json';\r\n\r\nconst DIFFICULTY_LEVELS = {\r\n   'EASY': 1,\r\n   'MEDIUM': 1.5,\r\n   'HARD': 2\r\n}\r\nconst DATA_BY_LEVEL = {\r\n   'EASY': wordsData.filter(word => word.length <= 4),\r\n   'MEDIUM': wordsData.filter(word => word.length >= 5 && word.length <= 8),\r\n   'HARD': wordsData.filter(word => word.length > 8)\r\n}\r\n\r\nclass WordManager {  \r\n   getWord(difficultyLevel) {\r\n      let word = '';\r\n      const data = DATA_BY_LEVEL[difficultyLevel];\r\n      word = data[Math.floor(Math.random() * data.length)];\r\n      return word;\r\n   } \r\n}\r\n\r\nexport default WordManager ","import React, { useState, useEffect } from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { PlayerInfo } from '../PlayerInfo/PlayerInfo'\r\nimport { ScoreBoard } from '../ScoreBoard/ScoreBoard'\r\nimport { ScoreInfo } from '../ScoreInfo/ScoreInfo'\r\nimport WordsDisplay from '../WordsDisplay/WordDisplay';\r\nimport TimerDisplay from '../TimerDisplay/TimerDisplay';\r\nimport './GamePlay.css'\r\nimport Utils from '../../Utils/GameService';\r\nimport Button from '../Common/Button/Button';\r\nimport TextBox from '../Common/TextBox/TextBox';\r\nimport crossIcon from '../../public/icons/cross-icon.svg';\r\nimport TimerHelper from \"../../Utils/TimerHelper\";\r\nimport WordManager from '../../Utils/WordManager';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nfunction GamePlay() {\r\n\r\n   const defaultTimeOutInMs = Utils.getGameTimeout();\r\n   const defaultTimeoutDuration = TimerHelper.milliSecsToTime(defaultTimeOutInMs);\r\n   const [pendingTimeInMs, setPendingTimeInMs] = useState(defaultTimeOutInMs);\r\n   const [pendingDuration, setPendingDuration] = useState(defaultTimeoutDuration);\r\n   const wordMgr = new WordManager();\r\n   const [typedText, setTypedText] = useState('');\r\n   const [wordCount, setWordCount] = useState(0);\r\n\r\n   const getNewWord = () => {        \r\n      return wordMgr.getWord(Utils.getUserSession().difficultyLevel).toLocaleUpperCase();\r\n   }\r\n   let [newWord, setNewWord] = useState(getNewWord());\r\n\r\n\r\n   const updateTimeOutDisplay = (time) => {\r\n      setPendingDuration(TimerHelper.milliSecsToTime(time));\r\n      setPendingTimeInMs(time);\r\n   }\r\n\r\n   const handleTimeOut = () => {    \r\n      if (wordCount > 1) {\r\n         Utils.saveUserScore(Utils.getTotalDuration());\r\n      }\r\n      history.push(Utils.REDIRECT_TO_EXIST);\r\n      return;\r\n   }\r\n\r\n   const handleWordChange = (event) => {\r\n      setTypedText(event.target.value.toLocaleUpperCase());\r\n      if (newWord === event.target.value.toLocaleUpperCase()) {\r\n         setNewWord(getNewWord());\r\n         setTypedText(\"\");\r\n         var currentDiffFactor = Utils.getGameDifficultyFactor();\r\n         Utils.updateGameDifficultyFactor(currentDiffFactor + 0.01);\r\n         event.target.value = \"\";\r\n         setPendingTimeInMs(defaultTimeOutInMs);\r\n         setWordCount(wordCount +1);\r\n         Utils.saveTotalNewWords(wordCount);\r\n      }\r\n   }\r\n\r\n\r\n   useEffect(() => {\r\n      const timer = pendingTimeInMs > 0 && setInterval(() => updateTimeOutDisplay(pendingTimeInMs - 40), 10);\r\n      if (pendingTimeInMs <= 0) {\r\n         updateTimeOutDisplay(0);\r\n         handleTimeOut();\r\n      }\r\n      return () => clearInterval(timer);\r\n   }, [pendingTimeInMs]);\r\n\r\n\r\n   let history = useHistory();\r\n   const handleStopGame = (event) => {\r\n      Utils.saveUserScore(Utils.getTotalDuration());\r\n      history.push(Utils.REDIRECT_TO_EXIST);\r\n      return;\r\n   }\r\n   const userData = Utils.getUserSession();\r\n   if (!userData.userName) {\r\n      history.push(Utils.REDIRECT_TO_LOGIN);\r\n      return;\r\n   }\r\n\r\n   return (\r\n\r\n      <Row>\r\n         <Col md={3} >\r\n            <PlayerInfo />\r\n            <ScoreBoard />\r\n            <Button\r\n               icon={crossIcon}\r\n               text=\"STOP GAME\"\r\n               onClick={handleStopGame} >\r\n            </Button>\r\n         </Col>\r\n         <Col md={6}>\r\n            <div className=\"center\">\r\n               <TimerDisplay\r\n                  duration={pendingDuration} >\r\n               </TimerDisplay>\r\n            </div>\r\n\r\n            <WordsDisplay\r\n               word={newWord}\r\n               typedText={typedText} >\r\n            </WordsDisplay>\r\n            <TextBox\r\n               textAlign=\"center\"\r\n               onChange={handleWordChange} >\r\n            </TextBox>\r\n         </Col>\r\n         <Col md={3}>\r\n            <ScoreInfo />\r\n         </Col>\r\n      </Row>\r\n\r\n\r\n   );\r\n}\r\n\r\n\r\nexport default GamePlay;","import React from 'react';\r\nimport { useHistory } from \"react-router-dom\";\r\nimport Utils from '../../Utils/GameService';\r\nimport { PlayerInfo } from '../PlayerInfo/PlayerInfo'\r\nimport Button from '../Common/Button/Button';\r\nimport crossIcon from '../../public/icons/cross-icon.svg';\r\nimport reloadIcon from '../../public/icons/reload-icon.svg';\r\nimport Text from '../Common/Text/Text'\r\nimport './GameOver.css';\r\nimport { Row, Col } from 'react-bootstrap';\r\n\r\nfunction GameOver() {\r\n  let history = useHistory();\r\n  const scores = Utils.getUserScores() ?? [];\r\n  let latestScore = scores[scores.length - 1] ?? 0;\r\n  console.log(scores);\r\n  const highestScore = Utils.getMaxScore(scores);\r\n  const totalSolved = Utils.getTotalNewWords();\r\n  Utils.saveTotalNewWords(0);\r\n  if (totalSolved < 2) {\r\n    latestScore = 0;\r\n  }\r\n\r\n\r\n  const handlePlayAgain = (event) => {\r\n    history.push(Utils.REDIRECT_TO_GAME);\r\n    return;\r\n  }\r\n  const handleQuit = (event) => {\r\n    history.push(Utils.REDIRECT_TO_LOGIN);\r\n    return;\r\n  }\r\n\r\n\r\n  return (\r\n    <Row  >\r\n      <Col md={3}>\r\n        <PlayerInfo />\r\n        <div className=\"mt-3\">\r\n\r\n        </div>\r\n\r\n      </Col>\r\n\r\n      <Col md={6} className=\"mt-5\" >\r\n        <Text\r\n          text={\"SCORE : GAME \" + scores.length}>\r\n        </Text>\r\n        <div className=\"score\">\r\n          <Text\r\n            text={latestScore}>\r\n          </Text>\r\n        </div>\r\n        {scores.length > 0 &&\r\n          <Text\r\n            text={\"Highest score : \" + highestScore.minutes + \":\" + highestScore.seconds + \":\" + highestScore.milliseconds}>\r\n          </Text>\r\n        }\r\n\r\n\r\n\r\n        <Button\r\n          icon={reloadIcon}\r\n          text=\"PLAY AGAIN\"\r\n          onClick={handlePlayAgain} >\r\n        </Button>\r\n        <Button\r\n          icon={crossIcon}\r\n          text=\"QUIT\"\r\n          onClick={handleQuit} >\r\n        </Button>\r\n      </Col>\r\n\r\n      <Col md={3}>\r\n        <Text\r\n          text=\"Fast Fingers\">\r\n        </Text>\r\n      </Col>\r\n    </Row>\r\n  );\r\n}\r\n\r\n\r\nexport default GameOver;","import Initialize from './Components/Initialize/initialize';\r\nimport GamePlay from './Components/GamePlay/GamePlay';\r\nimport GameOver from './Components/GameOver/GameOver';\r\nimport Container from 'react-bootstrap/Container';\r\nimport { BrowserRouter as Router, Route } from \"react-router-dom\";\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport React from 'react';\r\nimport './App.css';\r\n\r\n\r\nfunction App() {\r\n  return (\r\n\r\n    <Router >\r\n      <div className=\"App\" >\r\n        <Container className=\"p-3\" fluid=\"true\" >\r\n          <Route exact path=\"/\" component={Initialize}></Route>\r\n          <Route exact path=\"/GamePlay\" component={GamePlay}></Route>\r\n          <Route exact path=\"/GameOver\" component={GameOver}></Route>\r\n        </Container>\r\n      </div>\r\n    </Router >\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />  \r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}